<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on Pengjielee&#39;s blog</title>
    <link>https://www.pengjielee.cn/tags/sql/</link>
    <description>Recent content in sql on Pengjielee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Jul 2021 11:30:38 +0800</lastBuildDate><atom:link href="https://www.pengjielee.cn/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>184.部门工资最高的员工</title>
      <link>https://www.pengjielee.cn/post/leetcode/184.%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E6%9C%80%E9%AB%98%E7%9A%84%E5%91%98%E5%B7%A5/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:38 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/184.%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E6%9C%80%E9%AB%98%E7%9A%84%E5%91%98%E5%B7%A5/</guid>
      <description>题目 Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。
+----+-------+--------+--------------+ | Id | Name | Salary | DepartmentId | +----+-------+--------+--------------+ | 1 | Joe | 70000 | 1 | | 2 | Jim | 90000 | 1 | | 3 | Henry | 80000 | 2 | | 4 | Sam | 60000 | 2 | | 5 | Max | 90000 | 1 | +----+-------+--------+--------------+ Department 表包含公司所有部门的信息。
+----+----------+ | Id | Name | +----+----------+ | 1 | IT | | 2 | Sales | +----+----------+ 编写一个 SQL 查询，找出每个部门工资最高的员工。对于上述表，您的 SQL 查询应返回以下行（行的顺序无关紧要）。</description>
    </item>
    
    <item>
      <title>185.部门工资前三高的所有员工</title>
      <link>https://www.pengjielee.cn/draft/leetcode/_185.%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E5%89%8D%E4%B8%89%E9%AB%98%E7%9A%84%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:38 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/draft/leetcode/_185.%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E5%89%8D%E4%B8%89%E9%AB%98%E7%9A%84%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5/</guid>
      <description>题目 Employee 表包含所有员工信息，每个员工有其对应的工号 Id，姓名 Name，工资 Salary 和部门编号 DepartmentId 。
+----+-------+--------+--------------+ | Id | Name | Salary | DepartmentId | +----+-------+--------+--------------+ | 1 | Joe | 85000 | 1 | | 2 | Henry | 80000 | 2 | | 3 | Sam | 60000 | 2 | | 4 | Max | 90000 | 1 | | 5 | Janet | 69000 | 1 | | 6 | Randy | 85000 | 1 | | 7 | Will | 70000 | 1 | +----+-------+--------+--------------+ Department 表包含公司所有部门的信息。</description>
    </item>
    
    <item>
      <title>180.连续出现的数字</title>
      <link>https://www.pengjielee.cn/post/leetcode/180.%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/180.%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>题目 表：Logs
+-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | num | varchar | +-------------+---------+ id 是这个表的主键。 编写一个 SQL 查询，查找所有至少连续出现三次的数字。
返回的结果表中的数据可以按 任意顺序 排列。
查询结果格式如下面的例子所示：
Logs 表： +----+-----+ | Id | Num | +----+-----+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 2 | | 5 | 1 | | 6 | 2 | | 7 | 2 | +----+-----+ Result 表：</description>
    </item>
    
    <item>
      <title>181.超过经理收入的员工</title>
      <link>https://www.pengjielee.cn/post/leetcode/181.%E8%B6%85%E8%BF%87%E7%BB%8F%E7%90%86%E6%94%B6%E5%85%A5%E7%9A%84%E5%91%98%E5%B7%A5/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/181.%E8%B6%85%E8%BF%87%E7%BB%8F%E7%90%86%E6%94%B6%E5%85%A5%E7%9A%84%E5%91%98%E5%B7%A5/</guid>
      <description>题目 Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。
+----+-------+--------+-----------+ | Id | Name | Salary | ManagerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | NULL | | 4 | Max | 90000 | NULL | +----+-------+--------+-----------+ 给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。
+----------+ | Employee | +----------+ | Joe | +----------+ 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/employees-earning-more-than-their-managers 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</description>
    </item>
    
    <item>
      <title>182.查找重复的电子邮箱</title>
      <link>https://www.pengjielee.cn/post/leetcode/182.%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/182.%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</guid>
      <description>题目 编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。
示例：
+----+---------+ | Id | Email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ 根据以上输入，你的查询应返回以下结果：
+---------+ | Email | +---------+ | a@b.com | +---------+ 说明：所有电子邮箱都是小写字母。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/duplicate-emails 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
实现 实现1：
select Email from ( select Email, count(Email) as num from Person group by Email ) as statistic where num &amp;gt; 1; 实现2：
select Email from Person group by Email having count(Email) &amp;gt; 1; </description>
    </item>
    
    <item>
      <title>183.从不订购的客户</title>
      <link>https://www.pengjielee.cn/post/leetcode/183.%E4%BB%8E%E4%B8%8D%E8%AE%A2%E8%B4%AD%E7%9A%84%E5%AE%A2%E6%88%B7/</link>
      <pubDate>Mon, 19 Jul 2021 11:30:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/183.%E4%BB%8E%E4%B8%8D%E8%AE%A2%E8%B4%AD%E7%9A%84%E5%AE%A2%E6%88%B7/</guid>
      <description>题目 某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。
Customers 表：
+----+-------+ | Id | Name | +----+-------+ | 1 | Joe | | 2 | Henry | | 3 | Sam | | 4 | Max | +----+-------+ Orders 表：
+----+------------+ | Id | CustomerId | +----+------------+ | 1 | 3 | | 2 | 1 | +----+------------+ 例如给定上述表格，你的查询应返回：
+-----------+ | Customers | +-----------+ | Henry | | Max | +-----------+ 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
    <item>
      <title>196</title>
      <link>https://www.pengjielee.cn/post/leetcode/196.%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</link>
      <pubDate>Mon, 19 Jul 2021 09:58:32 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/196.%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</guid>
      <description>题目 编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。
+----+------------------+ | Id | Email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | | 3 | john@example.com | +----+------------------+ Id 是这个表的主键。 例如，在运行你的查询语句之后，上面的 Person 表应返回以下几行:
+----+------------------+ | Id | Email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | +----+------------------+ 提示：
执行 SQL 之后，输出是整个 Person 表。 使用 delete 语句。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/delete-duplicate-emails 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
实现 DELETE p1 FROM Person p1, Person p2 WHERE p1.</description>
    </item>
    
    <item>
      <title>197.上升的温度</title>
      <link>https://www.pengjielee.cn/post/leetcode/197.%E4%B8%8A%E5%8D%87%E7%9A%84%E6%B8%A9%E5%BA%A6/</link>
      <pubDate>Mon, 19 Jul 2021 09:51:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/197.%E4%B8%8A%E5%8D%87%E7%9A%84%E6%B8%A9%E5%BA%A6/</guid>
      <description>题目 表 Weather
+---------------+---------+ | Column Name | Type | +---------------+---------+ | id | int | | recordDate | date | | temperature | int | +---------------+---------+ id 是这个表的主键 该表包含特定日期的温度信息 编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 id 。
返回结果 不要求顺序 。
查询结果格式如下例：
Weather +----+------------+-------------+ | id | recordDate | Temperature | +----+------------+-------------+ | 1 | 2015-01-01 | 10 | | 2 | 2015-01-02 | 25 | | 3 | 2015-01-03 | 20 | | 4 | 2015-01-04 | 30 | +----+------------+-------------+ Result table: +----+ | id | +----+ | 2 | | 4 | +----+ 2015-01-02 的温度比前一天高（10 -&amp;gt; 25） 2015-01-04 的温度比前一天高（20 -&amp;gt; 30） 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
  </channel>
</rss>
