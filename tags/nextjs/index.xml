<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nextjs on Pengjielee&#39;s blog</title>
    <link>https://www.pengjielee.cn/tags/nextjs/</link>
    <description>Recent content in nextjs on Pengjielee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 30 Jun 2021 14:00:51 +0800</lastBuildDate><atom:link href="https://www.pengjielee.cn/tags/nextjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nextjs使用总结</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 30 Jun 2021 14:00:51 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>1、请求数据 topic.js
export default function Topic({ result }) { const data = result &amp;amp;&amp;amp; result.data || []; return ( &amp;lt;ul className=&amp;#34;list&amp;#34;&amp;gt; {data.map(item =&amp;gt; ( &amp;lt;li key={item.id}&amp;gt;{item.title}&amp;lt;/li&amp;gt; ))} &amp;lt;/ul&amp;gt; ); } export async function getServerSideProps(context) { const response = await fetch(&amp;#39;https://cnodejs.org/api/v1/topics&amp;#39;); const result = await response.json(); return { props: { result } }; } 2、自定义服务器 1、安装express
$ npm install express 2、创建server.js
const express = require(&amp;#39;express&amp;#39;); const next = require(&amp;#39;next&amp;#39;); const port = parseInt(process.</description>
    </item>
    
    <item>
      <title>Nextjs定制错误页</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E9%A1%B5/</link>
      <pubDate>Tue, 22 Jun 2021 15:54:41 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E9%A1%B5/</guid>
      <description>定制错误页 import Error from &amp;#39;next/error&amp;#39;; export default function Index({ result }) { const { success, data } = result; if (!success) { return &amp;lt;Error statusCode={500} title=&amp;#34;出错了&amp;#34; /&amp;gt;; } return ( &amp;lt;&amp;gt; &amp;lt;style jsx&amp;gt; {` .list { margin: 30px; } `} &amp;lt;/style&amp;gt; &amp;lt;ul className=&amp;#34;list&amp;#34;&amp;gt; {data.map(item =&amp;gt; ( &amp;lt;li key={item.id}&amp;gt;{item.title}&amp;lt;/li&amp;gt; ))} &amp;lt;/ul&amp;gt; &amp;lt;/&amp;gt; ); } export async function getServerSideProps(context) { const response = await fetch(&amp;#39;https://cnodejs.org/api/v1/topics&amp;#39;); const result = await response.json(); return { props: { result }, }; } </description>
    </item>
    
    <item>
      <title>Nextjs注入环境变量</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 22 Jun 2021 15:35:14 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description>安装 cross-env $ npm install cross-env --save-dev 使用cross-env注入环境变量 package.json
{ scripts: { &amp;#34;dev&amp;#34;: &amp;#34;next dev&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;next build&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;next start&amp;#34;, &amp;#34;build:test&amp;#34;: &amp;#34;cross-env BUILD_TARGET=test next build&amp;#34;, &amp;#34;build:prod&amp;#34;: &amp;#34;cross-env BUILD_TARGET=prod next build&amp;#34;, }, }; 创建next.config.js文件，并设置env变量 next.config.js
module.exports = { poweredByHeader: false, env: { NEXT_PUBLIC_BUILD_TARGET: process.env[&amp;#39;BUILD_TARGET&amp;#39;], }, }; 默认情况下，所有通过 .env.local 加载的环境变量仅在 Node.js 环境中可用，这意味着它们不会暴露到浏览器端。
为了向浏览器暴露环境变量，你必须在变量前添加 NEXT_PUBLIC_ 前缀。
使用环境变量 let baseURL = &amp;#39;&amp;#39;; switch (process.env.NEXT_PUBLIC_TARGET) { case &amp;#39;test&amp;#39;: baseURL = &amp;#39;https://test.***.com&amp;#39;; break; case &amp;#39;prod&amp;#39;: baseURL = &amp;#39;https://m.</description>
    </item>
    
    <item>
      <title>Nextjs使用wangeditor</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8wangeditor%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Tue, 22 Jun 2021 15:18:51 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8wangeditor%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>安装 $ npm install wangeditor-for-react React中使用 import { useState } from &amp;#34;react&amp;#34;; import ReactWEditor from &amp;#34;wangeditor-for-react&amp;#34;; function Editor() { const [value, setValue] = useState(&amp;#34;&amp;#34;); return &amp;lt;ReactWEditor defaultValue={value} onChange={setValue} /&amp;gt;; } export default Editor; Nextjs中使用 import { useState } from &amp;#34;react&amp;#34;; import dynamic from &amp;#34;next/dynamic&amp;#34;; const ReactWEditor = dynamic(import(&amp;#34;wangeditor-for-react&amp;#34;), { ssr: false, loading: () =&amp;gt; &amp;lt;p&amp;gt;Loading ...&amp;lt;/p&amp;gt;, }); const config = { height: 500, menus: [&amp;#34;bold&amp;#34;, &amp;#34;link&amp;#34;, &amp;#34;image&amp;#34;], showFullScreen: true, customUploadImg: function (resultFiles, insertImgFn) { // 获取上传的文件 const file = resultFiles[0]; // 上传图片，返回结果，将图片插入到编辑器中 insertImgFn(&amp;#39;imgUrl&amp;#39;); }, }; function Editor() { const [value, setValue] = useState(&amp;#34;&amp;#34;); return ( &amp;lt;ReactWEditor config={config} defaultValue={value} onChange={setValue} &amp;gt;&amp;lt;/ReactWEditor&amp;gt; ); }; export default Editor; More wangeditor-for-react</description>
    </item>
    
    <item>
      <title>Nextjs使用react-quill编辑器</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8react-quill%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Tue, 22 Jun 2021 14:53:53 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E4%BD%BF%E7%94%A8react-quill%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>安装 $ npm install react-quill --save // or $ yarn add react-quill React中使用 import React, { useState } from &amp;#34;react&amp;#34;; import ReactQuill from &amp;#34;react-quill&amp;#34;; import &amp;#34;react-quill/dist/quill.snow.css&amp;#34;; function MyComponent() { const [value, setValue] = useState(&amp;#34;&amp;#34;); return &amp;lt;ReactQuill theme=&amp;#34;snow&amp;#34; value={value} onChange={setValue} /&amp;gt;; } Nextjs中使用 import dynamic from &amp;#34;next/dynamic&amp;#34;; import &amp;#34;react-quill/dist/quill.snow.css&amp;#34;; const QuillNoSSRWrapper = dynamic(import(&amp;#34;react-quill&amp;#34;), { ssr: false, loading: () =&amp;gt; &amp;lt;p&amp;gt;Loading ...&amp;lt;/p&amp;gt;, }); const modules = { toolbar: [[{ header: 1 }, &amp;#34;bold&amp;#34;, { color: [] }], [&amp;#34;clean&amp;#34;]], }; export default function Editor(props) { const [value, setValue] = useState(&amp;#34;&amp;#34;); return ( &amp;lt;QuillNoSSRWrapper theme=&amp;#34;snow&amp;#34; value={value} modules={modules} onChange={setValue} /&amp;gt; ); } 封装组件 import dynamic from &amp;#34;next/dynamic&amp;#34;; import &amp;#34;react-quill/dist/quill.</description>
    </item>
    
    <item>
      <title>Nextjs配置antd语言包</title>
      <link>https://www.pengjielee.cn/post/fe/nextjs%E9%85%8D%E7%BD%AEantd%E8%AF%AD%E8%A8%80%E5%8C%85/</link>
      <pubDate>Tue, 22 Jun 2021 14:47:23 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/nextjs%E9%85%8D%E7%BD%AEantd%E8%AF%AD%E8%A8%80%E5%8C%85/</guid>
      <description>需求 antd 目前的默认文案是英文，我们需要使用中文。
nextjs自定义 App 创建./pages/_app.js
function MyApp({ Component, pageProps }) { return ( &amp;lt;Component {...pageProps} /&amp;gt; ); } export default MyApp 安装antd $ npm install antd --save # or $ yarn add antd 配置 import { ConfigProvider } from &amp;#39;antd&amp;#39;; import zhCN from &amp;#39;antd/lib/locale/zh_CN&amp;#39;; function MyApp({ Component, pageProps }) { return ( &amp;lt;ConfigProvider locale={zhCN}&amp;gt; &amp;lt;Component {...pageProps} /&amp;gt; &amp;lt;/ConfigProvider&amp;gt; ); } export default MyApp; More antd 国际化
https://ant.design/docs/react/i18n-cn
自定义 App</description>
    </item>
    
  </channel>
</rss>
