<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>es6 on Pengjielee&#39;s blog</title>
    <link>https://www.pengjielee.cn/tags/es6/</link>
    <description>Recent content in es6 on Pengjielee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 May 2021 10:18:22 +0800</lastBuildDate><atom:link href="https://www.pengjielee.cn/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ES6之Number</title>
      <link>https://www.pengjielee.cn/post/fe/es6%E4%B9%8Bnumber/</link>
      <pubDate>Thu, 20 May 2021 10:18:22 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/es6%E4%B9%8Bnumber/</guid>
      <description>Number.MAX_SAFE_INTEGER Number.MAX_SAFE_INTEGER 常量表示在 JavaScript 中最大的安全整数（maxinum safe integer)（2^53 - 1）
console.log(Number.MAX_SAFE_INTEGER); //9007199254740991 console.log(Math.pow(2,53) - 1); //9007199254740991 Number.MIN_SAFE_INTEGER Number.MIN_SAFE_INTEGER 代表在 JavaScript 中最小的安全的integer型数字 (-(2^53 - 1)).
console.log(Number.MIN_SAFE_INTEGER); //-9007199254740991 console.log(-(Math.pow(2,53) - 1)); //-9007199254740991 2^53 是 js 内置的最大的整数值（不安全），2^53 + 1 会被舍入成 2^53：
Math.pow(2, 53) === Math.pow(2, 53) + 1; // true Math.pow(2, 53) === Math.pow(2, 53) + 2; // false Number.isSafeInteger() Number.isSafeInteger() 方法用来判断传入的参数值是否是一个“安全整数”（safe integer）。
一个安全整数是一个符合下面条件的整数：
可以准确地表示为一个IEEE-754双精度数字, 其IEEE-754表示不能是舍入任何其他整数以适应IEEE-754表示的结果。 安全整数范围为 -(2^53 - 1)到 2^53 - 1 之间的整数，包含 -(2^53 - 1)和 2^53 - 1。</description>
    </item>
    
    <item>
      <title>ES6解构赋值</title>
      <link>https://www.pengjielee.cn/post/fe/es6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Thu, 20 May 2021 09:31:41 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/fe/es6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>ES6数组解构赋值 1、基本
let [a, b, c] = [1, 2, 3]; // a = 1, b = 2, c = 3 2、嵌套
let [a, [[b], c]] = [1, [[2], 3]]; // a = 1, b = 2, c = 3 3、可忽略
let [a, , b] = [1, 2, 3]; // a = 1, b = 2 4、不完全解构
let [a = 1, b] = []; // a = 1, b = undefined 5、剩余运算符</description>
    </item>
    
  </channel>
</rss>
