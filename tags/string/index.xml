<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>string on Pengjielee&#39;s blog</title>
    <link>https://www.pengjielee.cn/tags/string/</link>
    <description>Recent content in string on Pengjielee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 25 Aug 2021 15:04:06 +0800</lastBuildDate><atom:link href="https://www.pengjielee.cn/tags/string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>67.把字符串转换成整数</title>
      <link>https://www.pengjielee.cn/post/sword2/67.%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 25 Aug 2021 15:04:06 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/sword2/67.%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</guid>
      <description>题目 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
在任何情况下，若函数不能进行有效的转换时，请返回 0。
说明：
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为[−2^31, 2^31− 1]。如果数值超过这个范围，请返回 INT_MAX (2^31− 1) 或INT_MIN (−2^31) 。
示例1:
输入: &amp;ldquo;42&amp;rdquo; 输出: 42 示例2:
输入: &amp;quot; -42&amp;quot; 输出: -42 解释: 第一个非空白字符为 &amp;lsquo;-&amp;rsquo;, 它是一个负号。 我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。 示例3:
输入: &amp;ldquo;4193 with words&amp;rdquo; 输出: 4193 解释: 转换截止于数字 &amp;lsquo;3&amp;rsquo; ，因为它的下一个字符不为数字。 示例4:
输入: &amp;ldquo;words and 987&amp;rdquo; 输出: 0 解释: 第一个非空字符是 &amp;lsquo;w&amp;rsquo;, 但它不是数字或正、负号。 因此无法执行有效的转换。 示例5:
输入: &amp;ldquo;-91283472332&amp;rdquo; 输出: -2147483648 解释: 数字 &amp;ldquo;-91283472332&amp;rdquo; 超过 32 位有符号整数范围。 因此返回 INT_MIN (−231) 。</description>
    </item>
    
    <item>
      <title>58.II.左旋转字符串</title>
      <link>https://www.pengjielee.cn/draft/sword2/_58.ii.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 24 Aug 2021 15:04:22 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/draft/sword2/_58.ii.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目 JS实现 </description>
    </item>
    
    <item>
      <title>05.替换空格</title>
      <link>https://www.pengjielee.cn/post/sword2/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Tue, 24 Aug 2021 15:03:06 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/sword2/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>题目 请实现一个函数，把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;。
示例 1：
输入：s = &amp;ldquo;We are happy.&amp;rdquo; 输出：&amp;ldquo;We%20are%20happy.&amp;rdquo; 限制：
0 &amp;lt;= s 的长度 &amp;lt;= 10000
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 /** * @param {string} s * @return {string} */ var replaceSpace = function(s) { let result = &amp;#39;&amp;#39;; for(let i = 0; i &amp;lt; s.length; i++){ if(s[i] === &amp;#39; &amp;#39;){ result += &amp;#39;%20&amp;#39;; }else { result += s[i]; } } return result; }; </description>
    </item>
    
    <item>
      <title>058.最后一个单词的长度</title>
      <link>https://www.pengjielee.cn/post/leetcode/058.%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Wed, 14 Jul 2021 15:08:17 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/058.%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</guid>
      <description>题目 给你一个字符串 s，由若干单词组成，单词之间用空格隔开。返回字符串中最后一个单词的长度。如果不存在最后一个单词，请返回 0 。
单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。
示例 1： 输入：s = &amp;#34;Hello World&amp;#34; 输出：5 示例 2： 输入：s = &amp;#34; &amp;#34; 输出：0 提示：
1 &amp;lt;= s.length &amp;lt;= 10^4 s 仅有英文字母和空格 &amp;rsquo; &amp;rsquo; 组成
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/length-of-last-word 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 参考代码1：
/** * @param {string} s * @return {number} */ var lengthOfLastWord = function (s) { //获取最后一个字符的下标 let endIndex = s.length - 1; //如果下标大于等于0，并且最后一个字符等于空字符串 while (endIndex &amp;gt;= 0 &amp;amp;&amp;amp; s[endIndex] == &amp;#34; &amp;#34;) { endIndex--; } if (endIndex &amp;lt; 0) { return 0; } let startIndex = endIndex; while (startIndex &amp;gt;= 0 &amp;amp;&amp;amp; s[startIndex] !</description>
    </item>
    
    <item>
      <title>125.验证回文串</title>
      <link>https://www.pengjielee.cn/post/leetcode/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Sat, 08 May 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
说明：本题中，我们将空字符串定义为有效的回文串。
示例 1: 输入: &amp;#34;A man, a plan, a canal: Panama&amp;#34; 输出: true 示例 2: 输入: &amp;#34;race a car&amp;#34; 输出: false 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/valid-palindrome 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
知识点 charCodeAt()
charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。
charAt()
方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。
&amp;#39;a&amp;#39;.charCodeAt(); //97 &amp;#39;b&amp;#39;.charCodeAt(); //98 ... &amp;#39;z&amp;#39;.charCodeAt(); //122 (97+26-1=122) &amp;#39;A&amp;#39;.charCodeAt(); //65 &amp;#39;B&amp;#39;.charCodeAt(); //66 ... &amp;#39;Z&amp;#39;.charCodeAt(); //90 (65+26-1=90) &amp;#39;0&amp;#39;.charCodeAt(); //48 &amp;#39;1&amp;#39;.charCodeAt(); //49 &amp;#39;9&amp;#39;.charCodeAt(); //57 (48+10-1=57) JS实现 /** * @param {string} s * @return {boolean} */ var isPalindrome = (str) =&amp;gt; { // 字符串转为小写 str = str.</description>
    </item>
    
    <item>
      <title>680.验证回文字符串II</title>
      <link>https://www.pengjielee.cn/post/leetcode/680.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 06 May 2021 09:58:17 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/680.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目 给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。
示例 1: 输入: &amp;#34;aba&amp;#34; 输出: True 示例 2: 输入: &amp;#34;abca&amp;#34; 输出: True 解释: 你可以删除c字符。 注意:
字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/valid-palindrome-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 /** * @param {string} s * @return {boolean} */ var validPalindrome = function (s) { // 双指针，一个指向字符串开头，一个指向字符串末尾 let i = 0, j = s.length - 1; // 判断是否是回文串 const isPalindrome = (low, high) =&amp;gt; { while (low &amp;lt; high) { if (s.charAt(low) != s.charat(high)) { return false; } low++; high--; } return true; }; while (i &amp;lt; j) { // 字符串开头与末尾不相等 if (s.</description>
    </item>
    
    <item>
      <title>409.最长回文串</title>
      <link>https://www.pengjielee.cn/post/leetcode/409.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Tue, 27 Apr 2021 11:36:29 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/409.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。
在构造过程中，请注意区分大小写。比如 &amp;ldquo;Aa&amp;rdquo; 不能当做一个回文字符串。
注意: 假设字符串的长度不会超过 1010。
示例 1:
输入: &amp;#34;abccccdd&amp;#34; 输出: 7 解释: 我们可以构造的最长的回文串是&amp;#34;dccaccd&amp;#34;, 它的长度是 7。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-palindrome 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 回文串： 正读和反读都相同的字符序列为回文串。
奇数个字符的回文串： 除中间字符以外，其他字符镜面对称（即其他字符都出现偶数次）。
偶数个字符的回文串： 所有字符镜面对称（即所有字符都出现偶数次）。
回文串的本质： 可能除去一个字符以外)其他的字母都出现偶数次。
最长回文串的构成： 使所有字母尽可能多的出现偶数次 + 1次（如果此时还有字母没用完）。
JS实现 参考实现1：
/** * @param {string} s * @return {number} */ var longestPalindrome = function (s) { let result = 0; // 为奇数的标识 let odd_mark = false; // 创建长度为58的数组，默认填充0，存放每个字母出现的次数 // A-Z, 65-90; a-z, 97-122 // 长度为58（26个英文小写字母+26个英文大写字母+大写Z与小写a中间的6个字符） const numbers = new Array(58).</description>
    </item>
    
    <item>
      <title>028.实现strStr()</title>
      <link>https://www.pengjielee.cn/draft/leetcode/_028.%E5%AE%9E%E7%8E%B0strstr/</link>
      <pubDate>Tue, 27 Apr 2021 11:33:59 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/draft/leetcode/_028.%E5%AE%9E%E7%8E%B0strstr/</guid>
      <description>题目 实现 strStr() 函数。
给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。
说明：
当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。 示例：
示例 1： 输入：haystack = &amp;#34;hello&amp;#34;, needle = &amp;#34;ll&amp;#34; 输出：2 示例 2： 输入：haystack = &amp;#34;aaaaa&amp;#34;, needle = &amp;#34;bba&amp;#34; 输出：-1 示例 3： 输入：haystack = &amp;#34;&amp;#34;, needle = &amp;#34;&amp;#34; 输出：0 提示：
0 &amp;lt;= haystack.length, needle.length &amp;lt;= 5 * 10^4 haystack 和 needle 仅由小写英文字符组成 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
    <item>
      <title>003.无重复字符的最长子串</title>
      <link>https://www.pengjielee.cn/post/leetcode/003.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Tue, 27 Apr 2021 10:57:41 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/003.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>题目 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1: 输入: s = &amp;#34;abcabcbb&amp;#34; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;#34;abc&amp;#34;，所以其长度为 3。 示例 2: 输入: s = &amp;#34;bbbbb&amp;#34; 输出: 1 解释: 因为无重复字符的最长子串是 &amp;#34;b&amp;#34;，所以其长度为 1。 示例 3: 输入: s = &amp;#34;pwwkew&amp;#34; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;#34;wke&amp;#34;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&amp;#34;pwke&amp;#34; 是一个子序列，不是子串。 示例 4: 输入: s = &amp;#34;&amp;#34; 输出: 0 提示：
0 &amp;lt;= s.length &amp;lt;= 5 * 10^4 s 由英文字母、数字、符号和空格组成 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 参考代码1：
/** * @param {string} s * @return {number} */ var lengthOfLongestSubstring = function (s) { // hashmap，记录每个字符是否出现过 const map = new Map(); // 无重复字符最长子串的左边界 let left = 0; // 无重复字符最长子串的长度 let max = 0; // 遍历字符串 for (let i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>014.最长公共前缀</title>
      <link>https://www.pengjielee.cn/post/leetcode/014.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Sun, 25 Apr 2021 10:35:26 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/014.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>题目 编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 &amp;ldquo;&amp;quot;。
示例 1： 输入：strs = [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] 输出：&amp;#34;fl&amp;#34; 示例 2： 输入：strs = [&amp;#34;dog&amp;#34;,&amp;#34;racecar&amp;#34;,&amp;#34;car&amp;#34;] 输出：&amp;#34;&amp;#34; 解释：输入不存在公共前缀。 提示：
0 &amp;lt;= strs.length &amp;lt;= 200 0 &amp;lt;= strs[i].length &amp;lt;= 200 strs[i] 仅由小写英文字母组成 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-common-prefix 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 1、横向扫描法
/** * @param {string[]} strs * @return {string} */ var longestCommonPrefix = function (strs) { if (strs.length === 0) { return &amp;#34;&amp;#34;; } // 获取两个字符串的最长公共前缀 const lcp = (str1, str2) =&amp;gt; { const length = Math.</description>
    </item>
    
    <item>
      <title>387.字符串中的第一个唯一字符</title>
      <link>https://www.pengjielee.cn/post/leetcode/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Mon, 22 Mar 2021 10:30:49 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</guid>
      <description>题目 给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
示例：
s = &amp;#34;leetcode&amp;#34; 返回 0 s = &amp;#34;loveleetcode&amp;#34; 返回 2 提示：你可以假定该字符串只包含小写字母。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/first-unique-character-in-a-string 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
JS实现 参考代码1：
/** * @param {string} s * @return {number} */ var firstUniqChar = function (s) { const map = {}; for (let i = 0; i &amp;lt; s.length; i++) { const ch = s[i]; map[ch] = (map[ch] || 0) + 1; } for (let i = 0; i &amp;lt; s.length; i++) { if (map[s[i]] === 1) { return i; } } return -1; }; 参考代码2：hashmap实现</description>
    </item>
    
    <item>
      <title>344.反转字符串</title>
      <link>https://www.pengjielee.cn/post/leetcode/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 22 Mar 2021 10:12:29 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/leetcode/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。
不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。
你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。
示例 1：
输入：[&amp;#34;h&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;o&amp;#34;] 输出：[&amp;#34;o&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;h&amp;#34;] 示例 2：
输入：[&amp;#34;H&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;h&amp;#34;] 输出：[&amp;#34;h&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;H&amp;#34;] 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/reverse-string 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 双指针的解法：
1、将 left 指向字符数组首元素，right 指向字符数组尾元素。
2、当 left &amp;lt; right：
交换 s[left] 和 s[right]； left 指针右移一位，即 left = left + 1； right 指针左移一位，即 right = right - 1。 3、当 left &amp;gt;= right，反转结束，返回字符数组即可。
作者：LeetCode-Solution 链接：https://leetcode-cn.com/problems/reverse-string/solution/fan-zhuan-zi-fu-chuan-by-leetcode-solution/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
JS实现 参考代码1：
/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead.</description>
    </item>
    
    <item>
      <title>02.替换空格</title>
      <link>https://www.pengjielee.cn/post/sword/string_02.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Wed, 10 Mar 2021 14:15:24 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/sword/string_02.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>题目 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy。则经过替换之后的字符串为We%20Are%20Happy。
JS实现 //实现1：调用自带函数 function replaceSpace(str) { // write code here return str.replace(/\s{1}/g, &amp;#34;%20&amp;#34;); } //实现2：用新的变量存，当遇到 &amp;#34; &amp;#34;，就追加 &amp;#34;%20&amp;#34;，否则遇到什么追加什么 function replaceSpace(str) { // write code here let result = &amp;#34;&amp;#34;; for (let i = 0; i &amp;lt; str.length; i++) { if (str[i] === &amp;#34; &amp;#34;) { result += &amp;#34;%20&amp;#34;; } else { result += str[i]; } } return result; } Go实现 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { str := &amp;#34;We are happy.</description>
    </item>
    
  </channel>
</rss>
