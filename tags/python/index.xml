<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Pengjielee&#39;s blog</title>
    <link>https://www.pengjielee.cn/tags/python/</link>
    <description>Recent content in Python on Pengjielee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Feb 2021 11:54:37 +0800</lastBuildDate><atom:link href="https://www.pengjielee.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python学习书籍推荐</title>
      <link>https://www.pengjielee.cn/post/python-learning-book-recommendations/</link>
      <pubDate>Fri, 26 Feb 2021 11:54:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-learning-book-recommendations/</guid>
      <description>=== Python编程：从入门到实践
image::https://i.loli.net/2021/02/26/TCJnDdrj97OQ3BR.png[Python编程：从入门到实践,170,200]
可从微信读书观看。
=== Python核心编程（第3版）
image::https://i.loli.net/2021/02/26/yb1ncvwMjeEhNVl.png[Python核心编程（第3版),200,200]
网盘: https://pan.baidu.com/s/1tpNel6LNDmG2CkxAaL7D_w[&#39;&#39;, role=&amp;ldquo;external&amp;rdquo;, window=&amp;quot;_blank&amp;quot;] 提取码: pgwx</description>
    </item>
    
    <item>
      <title>Flask Web开发：Session实现简单登录</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-session-implements-simple-login/</link>
      <pubDate>Thu, 25 Feb 2021 14:34:40 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-session-implements-simple-login/</guid>
      <description>设置密钥 app.secret_key = b&amp;#39;_5#y2L&amp;#34;F4Q8z\n\xec]/&amp;#39; 生成随机密钥：
$ python -c &amp;#39;import os; print(os.urandom(16))&amp;#39; 首页 from flask import Flask, request, redirect, url_for, session, render_template from markupsafe import escape app = Flask(__name__) app.secret_key = &amp;#39;nimei&amp;#39; @app.route(&amp;#39;/&amp;#39;) def index(): return &amp;#39;&amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;a href=&amp;#34;/login&amp;#34;&amp;gt;登录&amp;lt;/a&amp;gt;&amp;#39; 登录 storage = {&amp;#39;username&amp;#39;: &amp;#39;lipengjie&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;123456&amp;#39;} @app.route(&amp;#39;/login&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;]) def login(): if request.method == &amp;#39;POST&amp;#39;: username = request.form[&amp;#39;username&amp;#39;] password = request.form[&amp;#39;password&amp;#39;] # 判断与服务器存储的用户密码是否一致，此处用一个对象模拟数据库 if storage[&amp;#39;username&amp;#39;] == username and storage[&amp;#39;password&amp;#39;] == password: # 登录成功以后，把用户名存入session，并跳转后台 session[&amp;#39;username&amp;#39;] = username return redirect(url_for(&amp;#39;admin&amp;#39;)) else: return &amp;#39;用户名或密码错误！&amp;#39; else: return render_template(&amp;#39;newlogin.</description>
    </item>
    
    <item>
      <title>Flask Web开发：重定向,终止响应,错误页</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-redirect-abort-notfound/</link>
      <pubDate>Thu, 25 Feb 2021 14:34:40 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-redirect-abort-notfound/</guid>
      <description>重定向 from flask import abort, redirect, url_for @app.route(&amp;#39;/welcome&amp;#39;) def welcome(): return redirect(url_for(&amp;#39;login&amp;#39;)) 终止响应 from flask import abort, redirect, url_for @app.route(&amp;#39;/login&amp;#39;) def login(): abort(401) 404页面 from flask import render_template @app.errorhandler(404) def page_not_found(error): return render_template(&amp;#39;404.html&amp;#39;, 404) </description>
    </item>
    
    <item>
      <title>Flask Web开发：渲染模板</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-render-templates/</link>
      <pubDate>Thu, 25 Feb 2021 14:13:53 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-render-templates/</guid>
      <description>渲染模板 1、创建模板目录 templates，及模板文件
$ mkdir templates &amp;amp;&amp;amp; cd templates $ touch hello.html $ touch login.html 2、目录结构
/flask_web /templates /hello.html /login.html /app.py 3、模板文件
hello.html
&amp;lt;!doctype html&amp;gt; &amp;lt;title&amp;gt;Hello from Flask&amp;lt;/title&amp;gt; {% if name %} &amp;lt;h1&amp;gt;Hello {{ name }}!&amp;lt;/h1&amp;gt; {% else %} &amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt; {% endif %} login.html
&amp;lt;!doctype html&amp;gt; &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt; &amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;用户名&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;密码&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;button&amp;gt;login&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; 4、指定模板
from flask import render_template @app.</description>
    </item>
    
    <item>
      <title>Flask Web开发：HTTP方法</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-http-methods/</link>
      <pubDate>Thu, 25 Feb 2021 13:18:40 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-http-methods/</guid>
      <description>定义 GET 方法（默认） from flask import request from flask import render_template @app.route(&amp;#39;/register&amp;#39;, methods=[&amp;#39;GET&amp;#39;]) def register(): return render_template(&amp;#39;register.html&amp;#39;, title=&amp;#39;Register Form&amp;#39;) 定义 POST 方法 from flask import request from markupsafe import escape @app.route(&amp;#39;/register&amp;#39;, methods=[&amp;#39;POST&amp;#39;]) def register_submit(): name = request.form[&amp;#39;name&amp;#39;] email = request.form[&amp;#39;email&amp;#39;] return &amp;#39;Username: &amp;#39; + escape(name) + &amp;#39;, Email: &amp;#39; + escape(email) 合在一起 @app.route(&amp;#39;/register&amp;#39;, methods=[&amp;#39;POST&amp;#39;]) def register(): if request.method == &amp;#39;POST&amp;#39;: name = request.form[&amp;#39;name&amp;#39;] email = request.form[&amp;#39;email&amp;#39;] return &amp;#39;Username: &amp;#39; + escape(name) + &amp;#39;, Email: &amp;#39; + escape(email) else: return render_template(&amp;#39;register.</description>
    </item>
    
    <item>
      <title>Flask Web开发：定义路由及变量约束</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-define-routes-and-variable-constraint/</link>
      <pubDate>Thu, 25 Feb 2021 11:37:03 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-define-routes-and-variable-constraint/</guid>
      <description>创建 app.py （flask默认会运行app.py文件) from flask import Flask from markupsafe import escape app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def index(): return &amp;#39;Index Page&amp;#39; 定义多个路由 @app.route(&amp;#39;/hello&amp;#39;) def hello(): return &amp;#39;Hello, World&amp;#39; @app.route(&amp;#39;/about&amp;#39;) def about(): return &amp;#39;About Page&amp;#39; 路由变量约束 接受变量类型：
string，默认类型，接受任何字符串（斜杠除外） int，接受整数； float，接受浮点数； path，类似字符串（包括斜杠）； uuid，接受UUID； @app.route(&amp;#39;/post/&amp;lt;int:post_id&amp;gt;&amp;#39;) def show_post(post_id): return &amp;#39;Post: %d&amp;#39; % post_id @app.route(&amp;#39;/user/&amp;lt;username&amp;gt;&amp;#39;) def show_user(username): return &amp;#39;User: %s&amp;#39; % escape(username) @app.route(&amp;#39;/path/&amp;lt;path:subpath&amp;gt;&amp;#39;) def show_path(subpath): return &amp;#39;Subpath: %s&amp;#39; % escape(subpath) @app.route(&amp;#39;/product/&amp;lt;float:price&amp;gt;&amp;#39;) def show_price(price): return &amp;#39;Price: %f&amp;#39; % price 请求响应：</description>
    </item>
    
    <item>
      <title>Flask Web开发：HelloWorld</title>
      <link>https://www.pengjielee.cn/post/flask-web-development-helloworld/</link>
      <pubDate>Thu, 25 Feb 2021 10:41:37 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/flask-web-development-helloworld/</guid>
      <description>安装 flask $ pip install flask 查看flask版本
$ flask --version 终端输出：
Flask 1.0.2 Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 05:52:31) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] 创建项目目录 $ mkdir flask_web &amp;amp;&amp;amp; cd flask_web 创建 hello.py from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def hello(): return &amp;#39;Hello, World!&amp;#39; 运行 $ export FLASK_APP=hello.py $ flask run 终端输出：
peng@localhost flask_web % export FLASK_APP=hello.py peng@localhost flask_web % flask run * Serving Flask app &amp;#34;hello.</description>
    </item>
    
    <item>
      <title>Python虚拟环境</title>
      <link>https://www.pengjielee.cn/post/python-virtual-environment/</link>
      <pubDate>Thu, 25 Feb 2021 09:17:00 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-virtual-environment/</guid>
      <description>虚拟环境 虚拟环境是系统的一个位置，可以在其中安装包，并将其与其他Python包隔离。这样能够针对不同项目创建一个独立的环境，便于后期的移植。
虚拟环境管理工具 主要有三种：
virtualenv（历史更悠久）； pipenv（功能更强大）； venv（Python3.3以上原生支持）； 使用 virtualenv 创建虚拟环境 1、安装virtualenv
$ pip install virtualenv 2、查看安装版本
$ python3 -m virtualenv --version 4、创建虚拟环境
$ python3 -m virtualenv dev_env 这时终端显示：
peng@localhost myblog % python3 -m virtualenv dev_env created virtual environment CPython3.6.5.final.0-64 in 568ms creator CPython3Posix(dest=/Users/peng/python_work/myblog/dev_env, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/Users/peng/Library/Application Support/virtualenv) added seed packages: pip==21.0.1, setuptools==52.0.0, wheel==0.36.2 activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator peng@localhost myblog % ls dev_env 5、激活虚拟环境
$ source dev_env/bin/activate 6、安装flask</description>
    </item>
    
    <item>
      <title>SublimeText中运行Python程序</title>
      <link>https://www.pengjielee.cn/post/run-the-python-program-in-sublimetext/</link>
      <pubDate>Wed, 24 Feb 2021 11:36:26 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/run-the-python-program-in-sublimetext/</guid>
      <description>环境 操作系统：MacOS Big Sur（版本11.2） SublimeText：Version 3.1.1 使用系统自带版本，直接运行 创建 hello_world.py 文件，内容如下：
print(&amp;#39;Hello World.&amp;#39;) 选择菜单 Tools -&amp;gt; Build (或 command + B)。
配置Python3运行 1、查看Python3安装路径
$ type -a python3 or $ which python3 2、配置Sublime Text
选择菜单 Tools -&amp;gt; Build -&amp;gt; New Build System，会打开一个新的配置文件。
编辑内容如下：
{ &amp;#34;cmd&amp;#34;: [&amp;#34;/usr/local/bin/python3&amp;#34;, &amp;#34;-u&amp;#34;, &amp;#34;$file&amp;#34;], } 将文件重命名为 Python3.sublime-build，保存至默认目录。
选择菜单 Tools -&amp;gt; Build System -&amp;gt; Python3，再选择菜单Tools -&amp;gt; Build (或 command + B)。</description>
    </item>
    
    <item>
      <title>Python基础：操作Mongodb</title>
      <link>https://www.pengjielee.cn/post/python-basic-operating-the-mongodb/</link>
      <pubDate>Tue, 17 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-operating-the-mongodb/</guid>
      <description>查看python版本/更新pip $ python3 --version $ pip install --upgrade pip 安装 pip install pymongo 连接mongodb from pymongo import MongoClient # 格式化输出 from pprint import pprint client = MongoClient(&amp;#39;mongodb://localhost:27017/&amp;#39;) # 指定数据库 db = client.wangyi # 指定集合 collection = db.playlist 插入 # 插入单条 result = collection.insert_one({&amp;#39;title&amp;#39;:&amp;#39;test&amp;#39;}) pprint(result) # 插入多条 result = collection.insert_many([{&amp;#39;title&amp;#39;:&amp;#39;test1&amp;#39;},{&amp;#39;title&amp;#39;:&amp;#39;test2&amp;#39;}]) pprint(result) 查询 # 查询一条 result = collection.find_one({}) pprint(result) # 查询多条 results = collection.find({}) pprint(results) for item in results: print(item) # 条件查询 results = collection.</description>
    </item>
    
    <item>
      <title>Python基础：操作Mysql</title>
      <link>https://www.pengjielee.cn/post/python-basic-operating-the-mysql/</link>
      <pubDate>Mon, 16 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-operating-the-mysql/</guid>
      <description>导入pymysql import pymysql.cursors 连接数据库 import pymysql.cursors def connect(): return pymysql.connect(host=&amp;#39;localhost&amp;#39;, port=3306, user=&amp;#39;root&amp;#39;, password=&amp;#39;386mysql.&amp;#39;, database=&amp;#39;test&amp;#39;, charset=&amp;#39;utf8mb4&amp;#39;, cursorclass=pymysql.cursors.DictCursor) 插入数据 def insert(): conn = connect() cursor = conn.cursor() try: sql = &amp;#34;INSERT INTO `users` (`email`) VALUES (%s)&amp;#34; cursor.execute(sql, (&amp;#39;386276251@qq.com&amp;#39;)) conn.commit() except Exception as e: print(e) conn.rollback() finally: cursor.close() conn.close() 插入多条数据 def insertMany(): conn = connect() cursor = conn.cursor() try: emails = [&amp;#39;386276252@qq.com&amp;#39;, &amp;#39;386276253@qq.com&amp;#39;, &amp;#39;386276254@qq.com&amp;#39;] sql = &amp;#34;INSERT INTO `users` (`email`) VALUES (%s)&amp;#34; cursor.executemany(sql, emails) conn.</description>
    </item>
    
    <item>
      <title>Python基础：读写CSV</title>
      <link>https://www.pengjielee.cn/post/python-basic-reading-and-writing-csv/</link>
      <pubDate>Sun, 15 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-reading-and-writing-csv/</guid>
      <description>CSV (Comma Separated Values)，逗号分隔值，有时也称为字符分隔值，因为分隔字符也可以不是逗号。
引入python csv import csv 使用csv reader读取 contacts.csv
10,jim,18614023231 11,tom,18614023232 12,mike,18614023233 with open(contacts.csv,newline=&amp;#39;&amp;#39;) as csvfile: reader=csv.reader(csvfile,delimiter=&amp;#39;,&amp;#39;) for row in reader: print(row) #print(&amp;#39;, &amp;#39;.join(row)) #print(row[0]+&amp;#39;,&amp;#39;+row[1]+&amp;#39;,&amp;#39;+row[2]) &amp;#34;&amp;#34;&amp;#34; output: [&amp;#39;10&amp;#39;, &amp;#39;jim&amp;#39;, &amp;#39;18614023231&amp;#39;] [&amp;#39;11&amp;#39;, &amp;#39;tom&amp;#39;, &amp;#39;18614023232&amp;#39;] [&amp;#39;12&amp;#39;, &amp;#39;mike&amp;#39;, &amp;#39;18614023233&amp;#39;] &amp;#34;&amp;#34;&amp;#34; 使用csv reader读取其他分隔符 contacts.csv
10|jim|18614023231 11|tom|18614023232 12|mike|18614023233 with open(contacts.csv,newline=&amp;#39;&amp;#39;) as csvfile: reader=csv.reader(csvfile,delimiter=&amp;#39;|&amp;#39;) for row in reader: print(row) &amp;#34;&amp;#34;&amp;#34; output: [&amp;#39;10&amp;#39;, &amp;#39;jim&amp;#39;, &amp;#39;18614023231&amp;#39;] [&amp;#39;11&amp;#39;, &amp;#39;tom&amp;#39;, &amp;#39;18614023232&amp;#39;] [&amp;#39;12&amp;#39;, &amp;#39;mike&amp;#39;, &amp;#39;18614023233&amp;#39;] &amp;#34;&amp;#34;&amp;#34; 使用csv dictreader读取 contacts.csv</description>
    </item>
    
    <item>
      <title>Python基础：发送网络请求</title>
      <link>https://www.pengjielee.cn/post/python-basic-sending-a-network-request/</link>
      <pubDate>Sat, 14 Nov 2020 19:00:45 +0801</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-sending-a-network-request/</guid>
      <description>安装 pip install requests 导入 import requests 发送get请求 r = requests.get(&amp;#39;http://www.baidu.com&amp;#39;) r.status_code #200 r.text r.encoding r.cookies r.headers r.headers[&amp;#39;content-type&amp;#39;] 发送post请求（自定义头部） headers = { &amp;#39;Authorization&amp;#39;: &amp;#39;bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiI1YzA3MzdmZTExNGZhZDExMmM5NDg4YmMiLCJpYXQiOjE1NDc3OTQyNDEsImV4cCI6MTU0Nzk2NzA0MX0.BVBqJizBOqlnVa0xQvWsoAAAY9loBpjs7En0WapEA2Q&amp;#39; } r = requests.post(&amp;#39;http://api.xxx.cn/notes&amp;#39;, headers=headers, data = {&amp;#39;title&amp;#39;:&amp;#39;hello1&amp;#39;,&amp;#39;content&amp;#39;:&amp;#39;hello&amp;#39;,&amp;#39;tags&amp;#39;:&amp;#39;hello&amp;#39;}) r.status_code #200 发送delete请求（自定义头部） r = requests.delete(&amp;#39;http://api.xxx.cn/notes/5c417a9d9bc6b3248bac3cba&amp;#39; ,headers=headers ) r.status_code #200 r.json() 发送put请求（自定义头部） r = requests.put(&amp;#39;http://api.xxx.cn/notes&amp;#39;, headers=headers, data = {&amp;#39;id&amp;#39;:&amp;#39;5c417d339bc6b3248bac3cbb&amp;#39;,&amp;#39;title&amp;#39;:&amp;#39;hello1&amp;#39;,&amp;#39;content&amp;#39;:&amp;#39;hello1&amp;#39;,&amp;#39;tags&amp;#39;:&amp;#39;hello1&amp;#39;}) r.status_code #200 发送get请求（带参数） r = requests.get(&amp;#39;http://api.xxx.cn/notes&amp;#39;, params={&amp;#39;id&amp;#39;:&amp;#39;5c088665cc0e141e46580592&amp;#39;}) r.status_code #200 r.text r.json() More http://cn.python-requests.org/zh_CN/latest/</description>
    </item>
    
    <item>
      <title>Python基础：异常处理</title>
      <link>https://www.pengjielee.cn/post/python-basic-exception-handling/</link>
      <pubDate>Fri, 13 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-exception-handling/</guid>
      <description>触发异常 创建 division.py 文件
result = 2 / 0 print(result) 程序报错：
Traceback (most recent call last): File &amp;#34;division.py&amp;#34;, line 1, in &amp;lt;module&amp;gt; result = 2 / 0 ZeroDivisionError: division by zero 捕获异常 try: result = 2 / 0 print(result) except ZeroDivisionError: print(&amp;#39;除数不能为0&amp;#39;) # output: 除数不能为0 try-except-else 出错时捕获异常，成功时执行else代码块。
print(&amp;#39;给两个数字，计算商：(按q退出)&amp;#39;) while True: first_number = input(&amp;#39;被除数：&amp;#39;) if first_number == &amp;#39;q&amp;#39;: break second_number = input(&amp;#39;除数：&amp;#39;) try: answer = int(first_number) / int(second_number) except ZeroDivisionError: print(&amp;#39;警告：除数不能为0&amp;#39;) else: print(answer) 异常类型 1、ZeroDivisionError 除数为 0 引发此异常</description>
    </item>
    
    <item>
      <title>Python基础：文件读写</title>
      <link>https://www.pengjielee.cn/post/python-basic-reading-and-writing-file/</link>
      <pubDate>Tue, 10 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-reading-and-writing-file/</guid>
      <description>准备工作 1、文件结构
python_work（目录） -- hello.txt -- read_all.py -- read_by_line.py -- write_file.py -- append_file.py 2、创建hello.txt，内容如下：
hello world hello tomorrow hello time hello myself 读取整个文件 创建read_all.py，内容如下：
with open(&amp;#39;hello.txt&amp;#39;) as file_reader: content = file_reader.read() print(content) 逐行读取文件 创建read_by_line.py，内容如下：
with open(&amp;#39;hello.txt&amp;#39;) as file_reader: for line in file_reader: print(line.strip()) 写入空文件 创建write_file.py，内容如下：
# newfile.txt不存在，会创建；如果存在，会重新写入内容（覆盖原来内容） with open(&amp;#39;newfile.txt&amp;#39;, &amp;#39;w&amp;#39;) as file_writer: file_writer.write(&amp;#39;Hello World.&amp;#39;) 追加写入文件 创建append_file.py，内容如下：
# appendfile.txt不存在，会创建；如果存在，会追加写入内容（不会覆盖原来内容） with open(&amp;#39;appendfile.txt&amp;#39;, &amp;#39;a&amp;#39;) as file_writer: file_writer.write(&amp;#39;Hello World.&amp;#39;) </description>
    </item>
    
    <item>
      <title>Python基础：类</title>
      <link>https://www.pengjielee.cn/post/python-basic-class/</link>
      <pubDate>Mon, 09 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-class/</guid>
      <description>创建类 创建 animal.py 文件，定义动物类。
class Animal: &amp;#34;&amp;#34;&amp;#34;初始化方法&amp;#34;&amp;#34;&amp;#34; def __init__(self, name, age): self.name = name self.age = age &amp;#34;&amp;#34;&amp;#34;方法eat&amp;#34;&amp;#34;&amp;#34; def eat(self): print(self.name.title() + &amp;#39; &amp;#39; + &amp;#39;is eating.&amp;#39;) &amp;#34;&amp;#34;&amp;#34;方法run&amp;#34;&amp;#34;&amp;#34; def run(self): print(self.name.title() + &amp;#39; &amp;#39; + &amp;#39;is running.&amp;#39;) 创建实例 创建动物类的实例。
dog = Animal(&amp;#39;xiaohua&amp;#39;, 6) print(dog.name) # 访问属性name print(dog.age) # 访问属性age dog.eat() # 调用方法eat() dog.run() # 调用方法run() # output: &amp;#34;&amp;#34;&amp;#34; xiaohua 6 Xiaohua is eating. Xiaohua is running. &amp;#34;&amp;#34;&amp;#34; 继承 创建 dog.py 文件，定义 Dog 类，Dog 类 继承 Animal类。</description>
    </item>
    
    <item>
      <title>Python基础：函数</title>
      <link>https://www.pengjielee.cn/post/python-basic-function/</link>
      <pubDate>Sun, 08 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-function/</guid>
      <description>定义函数 # 定义函数 def hello(): print(&amp;#39;hello world!&amp;#39;) # 调用函数 hello() # Prints out: hello world! 参数传递 1、设置参数
def hello(name): print(&amp;#39;hello %s&amp;#39; % name) temp = hello(&amp;#39;jack&amp;#39;) # Prints out: hello jack print(temp) # Prints out: None def sum(a, b): return a + b sum(1, 2) # Prints out: 3 2、参数默认值
def hello(name=&amp;#39;jack&amp;#39;): print(&amp;#39;hello %s&amp;#39; % name) hello() # Prints out: hello jack hello(&amp;#39;jim&amp;#39;) # Prints out: hello jim def sum(a,b=2): return a + b sum(1) # Prints out: 3 sum(2) # Prints out: 4 # 注意：带默认值的参数必须放在不带默认值的参数之后 def sum(a=1,b): # SyntaxError: non-default argument follows default argument return a + b 2、可变参数</description>
    </item>
    
    <item>
      <title>Python基础：元组</title>
      <link>https://www.pengjielee.cn/post/python-baisc-tuple/</link>
      <pubDate>Sat, 07 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-baisc-tuple/</guid>
      <description>创建元组 # 定义空元组 t1 = () print(t1) # Prints out: () print(type(t1)) # Prints out: &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; # 定义一元组 t2 = (2,) print(t2) # Prints out: (2,) print(type(t2)) # Prints out: &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; # 定义三元组 t3 = (30, 10, 55) print(t3) # Prints out: (30, 10, 55) print(type(t3)) # Prints out: &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 访问元组 t1 = (1,3,5,7,9) print(t1[0]) # Prints out: 1 print(t1[5]) # IndexError: tuple index out of range print(t1[1:3]) # Prints out: (3, 5) print(t1[-2]) # Prints out: 7 修改元组 t1 = (1,3,5,7,9) t1[0] = 2 # TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment t2 = (2,4) t3 = t1 + t2 print(t3) # Prints out: (1, 3, 5, 7, 9, 2, 4) 删除元组 t1 = (1,3,5,7,9) print(t1) # Prints out: (1, 3, 5, 7, 9) del t1 print(t1) # NameError: name &amp;#39;t1&amp;#39; is not defined 元组运算 # 计算元素个数 t1 = (1,3,5,7,9) print(len(t1)) # Prints out: 5 # 连接 t1 = (1,3,5,7,9) t2 = (2,4) print(t1 + t2) # Prints out: (1, 3, 5, 7, 9, 2, 4) # 复制 t1 = (2,4) print(t1 * 3) # Prints out: (2, 4, 2, 4, 2, 4) # 元素是否存在 t1 = (2,4) print(2 in t1) # Prints out: True # 遍历 t1 = (2,4) for x in t1: print(x) # 截取元素 t1 = (1,3,5,7,9) print(t1[1:]) # Prints out: (3, 5, 7, 9) 元组与列表 Python的元组与列表类似，不同之处在于元组的元素不能修改。</description>
    </item>
    
    <item>
      <title>Python基础：字典</title>
      <link>https://www.pengjielee.cn/post/python-basic-dict/</link>
      <pubDate>Fri, 06 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-dict/</guid>
      <description>创建字典 1、使用{}字面量
person = { &amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;peng&amp;#39;, &amp;#39;age&amp;#39;: 20, &amp;#39;address&amp;#39;: &amp;#39;Beijing&amp;#39; } print(person) # Prints out: {&amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;peng&amp;#39;, &amp;#39;age&amp;#39;: 20, &amp;#39;address&amp;#39;: &amp;#39;Beijing&amp;#39;} 2、使用内置函数dict
person = dict(id=1, name=&amp;#39;peng&amp;#39;, age=20, address=&amp;#39;Beijing&amp;#39;) print(person) # Prints out: {&amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;peng&amp;#39;, &amp;#39;age&amp;#39;: 20, &amp;#39;address&amp;#39;: &amp;#39;Beijing&amp;#39;} 3、用字典生成式语法创建字典
items3 = {x: x ** 3 for x in range(1, 6)} print(items3) # {1: 1, 2: 8, 3: 27, 4: 64, 5: 125} 访问字典的值 person = { &amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;peng&amp;#39;, &amp;#39;age&amp;#39;: 20, &amp;#39;address&amp;#39;: &amp;#39;Beijing&amp;#39; } print(person[&amp;#39;id&amp;#39;]) # Prints out: 1 print(person[&amp;#39;hobby&amp;#39;]) # KeyError: &amp;#39;hobby&amp;#39; # 使用get方法 print(person.</description>
    </item>
    
    <item>
      <title>Python基础：集合</title>
      <link>https://www.pengjielee.cn/post/python-basic-set/</link>
      <pubDate>Thu, 05 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-set/</guid>
      <description>集合特性 集合（set）是一个无序的不重复元素序列。
确定性。 互异性。 无序性。 创建集合 1、使用大括号 {} 创建
colors = { &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39; } print(colors) # Prints out: {&amp;#39;green&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;} numbers = { 1, 2, 3, 3, 4 } print(numbers) # Prints out: {1, 2, 3, 4} 2、使用 set() 函数创建
colors = set((&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;)) print(colors) # Prints out: {&amp;#39;green&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;} numbers = set([1,2,3,3,4]) print(numbers) # Prints out: {1, 2, 3, 4} words = set(&amp;#39;python&amp;#39;) print(words) # Prints out: {&amp;#39;p&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;o&amp;#39;} 注意：创建一个空集合必须用 set() 而不是 {}，因为 {} 是用来创建一个空字典。</description>
    </item>
    
    <item>
      <title>Python基础：语句</title>
      <link>https://www.pengjielee.cn/post/python-basic-statement/</link>
      <pubDate>Wed, 04 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-statement/</guid>
      <description>if语句 1、if
print(&amp;#39;请输入用户名：&amp;#39;) name = input() if name == &amp;#39;peng&amp;#39;: print(&amp;#39;登录成功&amp;#39;) 2、if&amp;hellip;else
print(&amp;#39;请输入登录用户名：&amp;#39;) name = input() print(&amp;#39;请输入登录密码：&amp;#39;) password = input() if name == &amp;#39;admin&amp;#39; and password == &amp;#39;123456&amp;#39;: print(&amp;#39;登录成功!&amp;#39;) else: print(&amp;#39;用户名或密码错误!!!&amp;#39;) 3、if&amp;hellip;elif&amp;hellip;else
print(&amp;#39;请输入登录用户名：&amp;#39;) name = input() print(&amp;#39;请输入登录密码：&amp;#39;) password = input() if name == &amp;#39;admin&amp;#39; and password == &amp;#39;123456&amp;#39;: print(&amp;#39;admin登录成功!&amp;#39;) elif name == &amp;#39;peng&amp;#39; and password == &amp;#39;654321&amp;#39;: print(&amp;#39;peng登录成功!&amp;#39;) else: print(&amp;#39;用户名或密码错误!!!&amp;#39;) for-in语句 # Prints out: P,y,t,h,o,n for letter in &amp;#39;Python&amp;#39;: print(letter) # Prints out: red,green,blue for color in [&amp;#39;red&amp;#39;,&amp;#39;green&amp;#39;,&amp;#39;blue&amp;#39;]: print(color) # Prints out: 0:red,1:green,2:blue colors = [&amp;#39;red&amp;#39;,&amp;#39;green&amp;#39;,&amp;#39;blue&amp;#39;] for index in range(len(colors)): print(&amp;#39;%s:%s&amp;#39; % (index, colors[index])) # Prints out: 1,2,3,4 for number in range(1,5): print(number) # Prints out: 1,2,3,4 and then it prints &amp;#34;number value reached 4&amp;#34; for number in range(1,5): print(number) else: print(&amp;#34;number value reached %d&amp;#34; %(number)) while语句 # Prints out: 0,1,2,3,4,5,6,7,8 count = 0 while (count &amp;lt; 9): print(count) count = count + 1 break语句 # Prints out: P,y,t for letter in &amp;#39;Python&amp;#39;: if letter == &amp;#39;h&amp;#39;: break print(letter) # Prints out: 0,1,2,3,4 count = 0 while (count &amp;lt; 9): print(count) count = count + 1 if(count == 5): break continue语句 # Prints out: P,y,t,o,n for letter in &amp;#39;Python&amp;#39;: if letter == &amp;#39;h&amp;#39;: continue print(letter) # Prints out: 1,2,3,4,6,7,8,9 count = 0 while (count &amp;lt; 9): count = count + 1 if(count == 5): continue print(count) pass语句 pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</description>
    </item>
    
    <item>
      <title>Python基础：列表</title>
      <link>https://www.pengjielee.cn/post/python-basic-list/</link>
      <pubDate>Tue, 03 Nov 2020 19:00:48 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-list/</guid>
      <description>创建列表 1、使用[]字面量
numbers = [1,3,5,7,9,10] print(numbers) # Prints out: [1, 3, 5, 7, 9, 10] 2、使用list()函数创建
numbrers = list((1,3,5,7,9,10)) print(numbers) # Prints out: [1, 3, 5, 7, 9, 10] str = list(&amp;#39;python&amp;#39;) print(str) # Prints out: [&amp;#39;p&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;n&amp;#39;] 访问列表 list1 = [&amp;#39;red&amp;#39;,&amp;#39;green&amp;#39;,&amp;#39;blue&amp;#39;] list2 = [1,3,5,7,9] print(list1[0]) # Prints out: red print(list2[1:5]) # Prints out: [3, 5, 7, 9] 更新列表 list1 = [&amp;#39;red&amp;#39;,&amp;#39;green&amp;#39;,&amp;#39;blue&amp;#39;] print(list1[0]) # Prints out: red list1[0] = &amp;#39;black&amp;#39; print(list1[0]) # Prints out: black 遍历列表 list1 = [&amp;#39;red&amp;#39;,&amp;#39;green&amp;#39;,&amp;#39;blue&amp;#39;] # Prints out: red green blue for item in list1: print(item) # Prints out: red green blue for index in range(len(list1)): print(list1[index]) 列表方法 list1 = [1,2,3,4] # 在尾部添加元素 list1.</description>
    </item>
    
    <item>
      <title>Python基础：字符串</title>
      <link>https://www.pengjielee.cn/post/python-basic-string/</link>
      <pubDate>Tue, 03 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-string/</guid>
      <description>创建字符串 使用单引号&amp;rsquo; &amp;rsquo; 或 双引号 &amp;quot; &amp;quot; 来创建字符串
str1 = &amp;#34;Jack&amp;#34; str2 = &amp;#39;Jim&amp;#39; 字符串操作 1、 字符串索引访问
message = &amp;#39;hello&amp;#39; print(message[0]) # Prints out: h print(message[1]) # Prints out: e print(message[-1]) # Prints out: o print(message[-2]) # Prints out: l print(message[5]) # IndexError: string index out of range 2、字符串拼接
last_name = &amp;#39;lee&amp;#39; first_name = &amp;#39;pengjie&amp;#39; full_name = first_name + &amp;#34; &amp;#34; + last_name print(full_name) # Prints out: pengjie lee 3、重复输出字符串</description>
    </item>
    
    <item>
      <title>Python基础：用户输入</title>
      <link>https://www.pengjielee.cn/post/python-basic-user-input/</link>
      <pubDate>Mon, 02 Nov 2020 19:00:45 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-user-input/</guid>
      <description>接受用户名问好 name = input(&amp;#39;Please enter your name: &amp;#39;) print(&amp;#39;Hello,&amp;#39; + name + &amp;#39;!&amp;#39;) 接受一个数值 age = input(&amp;#39;How old are you? &amp;#39;) if (age.isdigit()): if (int(age) &amp;gt; 18): print(&amp;#34;You&amp;#39;re not a kid anymore.&amp;#34;) else: print(&amp;#34;You&amp;#39;re just a kid.&amp;#34;) else: print(&amp;#39;Please enter a number.&amp;#39;) </description>
    </item>
    
    <item>
      <title>Python基础：输出Hello World</title>
      <link>https://www.pengjielee.cn/post/python-basic-hello-world/</link>
      <pubDate>Mon, 02 Nov 2020 19:00:40 +0800</pubDate>
      
      <guid>https://www.pengjielee.cn/post/python-basic-hello-world/</guid>
      <description>创建hello_world.py文件 print(&amp;#34;Hello World&amp;#34;) 运行 python3 hello_world.py # output: Hello World </description>
    </item>
    
  </channel>
</rss>
